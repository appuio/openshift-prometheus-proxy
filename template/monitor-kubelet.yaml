apiVersion: v1
kind: Template
metadata:
  name: kubelet
objects:
- apiVersion: v1
  kind: ImageStream
  metadata:
    k8s-app: kubelet
    name: kubelet
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations: null
      from:
        kind: DockerImage
        name: registry.access.redhat.com/rhel7:latest
      importPolicy:
        scheduled: ${{SCHEDULE_IMAGE_IMPORTS}}
      name: latest
      referencePolicy:
        type: Source
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      k8s-app: kubelet
    name: kubelet
  spec:
    clusterIP: None
    ports:
    - name: https-metrics
      port: 10250
      protocol: TCP
      targetPort: 10250
    sessionAffinity: None
    type: ClusterIP
    selector:
      k8s-app: kubelet
- apiVersion: extensions/v1beta1
  kind: DaemonSet  # This is a placeholder pod to discover endpoints of all nodes whose kubelet we want/are allowed to access
  metadata:
    name: kubelet
    annotations:
      image.openshift.io/triggers: '[{"from":{"kind":"ImageStreamTag","name":"kubelet:latest"},"fieldPath":"spec.template.spec.containers[?(@.name==\"kubelet\")].image"}]'
  spec:
    updateStrategy:
      type: RollingUpdate
    selector:
        matchLabels:
          k8s-app: kubelet
    template:
      metadata:
        labels:
          k8s-app: kubelet
      spec:
        nodeSelector: ${{KUBELET_NODE_SELECTOR}}
        containers:
        - image: kubelet:latest
          command: ["/usr/bin/tail", "-f", "/dev/null"]  # Do nothing but react immediately to stop
          imagePullPolicy: IfNotPresent
          name: kubelet
          resources: {}
          terminationMessagePath: /dev/termination-log
        serviceAccount: default
        terminationGracePeriodSeconds: 10
- apiVersion: monitoring.coreos.com/v1
  kind: ServiceMonitor
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"monitoring.coreos.com/v1","kind":"ServiceMonitor","metadata":{"annotations":{},"labels":{"k8s-app":"kubelet","prometheus":"pitc"},"name":"kubelet","namespace":"pitc-prometheus"},"spec":{"endpoints":[{"bearerTokenFile":"/var/run/secrets/kubernetes.io/serviceaccount/token","honorLabels":true,"interval":"30s","port":"https-metrics","relabelings":[{"action":"replace","regex":"([^;]+);[^:]+:(.+)","replacement":"$1:$2","separator":";","sourceLabels":["__meta_kubernetes_pod_host_ip","__address__"],"targetLabel":"__address__"}],"scheme":"https","targetPort":0,"tlsConfig":{"caFile":"/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"}},{"bearerTokenFile":"/var/run/secrets/kubernetes.io/serviceaccount/token","honorLabels":true,"interval":"30s","metricRelabelings":[{"action":"drop","regex":"container_(network_tcp_usage_total|network_udp_usage_total|cpu_user_seconds_total|cpu_cfs_periods_total|memory_swap|memory_cache|last_seen|fs_(reads_total|writes_total|read_seconds_total|write_seconds_total|sector_(.*)|io_(.*)|reads_merged_total|writes_merged_total)|tasks_state|memory_failcnt|memory_failures_total|spec_memory_swap_limit_bytes|fs_(.*)_bytes_total|spec_(.*))","sourceLabels":["__name__"]},{"action":"replace","regex":"(.+);(.+)","replacement":"$1/$2","separator":";","sourceLabels":["pod_name","container_name"],"targetLabel":"pod_container"}],"path":"/metrics/cadvisor","port":"https-metrics","relabelings":[{"action":"replace","regex":"([^;]+);[^:]+:(.+)","replacement":"$1:$2","separator":";","sourceLabels":["__meta_kubernetes_pod_host_ip","__address__"],"targetLabel":"__address__"}],"scheme":"https","targetPort":0,"tlsConfig":{"caFile":"/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"}}],"jobLabel":"k8s-app","namespaceSelector":{},"selector":{"matchLabels":{"k8s-app":"kubelet"}}}}
    labels:
      app: kubelet
      prometheus: ${PROMETHEUS_ID}
    name: kubelet
  spec:
    endpoints:
    - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
      honorLabels: true
      interval: 30s
      relabelings:
      - action: replace
        regex: ([^;]+);([^;]+)
        replacement: /nodes/$1/proxy$2
        separator: ;
        sourceLabels:
        - __meta_kubernetes_pod_node_name
        - __metrics_path__
        targetLabel: __metrics_path__
      - action: replace
        regex: ([^;]+);([^;]+);[^:]+:(.+)
        replacement: $1--$2:$3
        separator: ;
        sourceLabels:
        - namespace
        - pod
        - __address__
        targetLabel: instance
      - action: replace
        replacement: ${OPENSHIFT_PROMETHEUS_PROXY_HOSTNAME}
        targetLabel: __address__
      scheme: https
      port: https-metrics
      tlsConfig:
        caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecureSkipVerify: ${{SERVICE_MONITOR_SKIP_TLS_VERIFY}}
    - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
      honorLabels: true
      interval: 30s
      metricRelabelings:
      - action: drop
        regex: container_(network_tcp_usage_total|network_udp_usage_total|cpu_user_seconds_total|cpu_cfs_periods_total|memory_swap|memory_cache|last_seen|fs_(reads_total|writes_total|read_seconds_total|write_seconds_total|sector_(.*)|io_(.*)|reads_merged_total|writes_merged_total)|tasks_state|memory_failcnt|memory_failures_total|spec_memory_swap_limit_bytes|fs_(.*)_bytes_total|spec_(.*))
        sourceLabels:
        - __name__
      - action: replace
        regex: (.+)
        replacement: $1
        separator: ;
        sourceLabels:
        - pod_name
        targetLabel: pod
      - action: replace
        regex: (.+);(.+)
        replacement: $1/$2
        separator: ;
        sourceLabels:
        - pod_name
        - container_name
        targetLabel: pod_container
      path: /metrics/cadvisor
      relabelings:
      - action: replace
        regex: ([^;]+);([^;]+)
        replacement: /nodes/$1/proxy$2
        separator: ;
        sourceLabels:
        - __meta_kubernetes_pod_node_name
        - __metrics_path__
        targetLabel: __metrics_path__
      - action: replace
        regex: ([^;]+);([^;]+);[^:]+:(.+)
        replacement: $1--$2:$3
        separator: ;
        sourceLabels:
        - namespace
        - pod
        - __address__
        targetLabel: instance
      - action: replace
        replacement: ${OPENSHIFT_PROMETHEUS_PROXY_HOSTNAME}
        targetLabel: __address__
      scheme: https
      port: https-metrics
      tlsConfig:
        caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecureSkipVerify: ${{SERVICE_MONITOR_SKIP_TLS_VERIFY}}
    jobLabel: k8s-app
    namespaceSelector: {}
    selector:
      matchLabels:
        k8s-app: kubelet
parameters:
- description: 'External hostname of OpenShift Prometheus Proxy.'
  name: OPENSHIFT_PROMETHEUS_PROXY_HOSTNAME
  required: true
- description: ID of Prometheus instance, is used in label keys and must be unique on cluster. Defaults to 'apps'.
  name: PROMETHEUS_ID
  value: apps
- description: 'Node selector for Kubelet exporter in JSON. Defaults to ''{"node-role.kubernetes.io/compute": "true"}''.'
  name: KUBELET_NODE_SELECTOR
  value: '{"node-role.kubernetes.io/compute": "true"}'
- description: Whether to import new images automatically.
  name: SCHEDULE_IMAGE_IMPORTS
  value: 'false'
- description: Whether to skip TLS certificate verification in the kube-state-metrics ServiceMonitor. Defaults to 'false'.
  name: SERVICE_MONITOR_SKIP_TLS_VERIFY
  value: 'false'